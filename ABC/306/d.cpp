#include <bits/stdc++.h>
#include <iostream>
using namespace std;
int main()
{
  int N;
  int X[3 * 100000];
  long Y[3 * 100000];

  cin >> N;
  for (int i = 0; i < N; i++)
  {
    cin >> X[i] >> Y[i];
  }

  set<long> set_of_one;
  long long res = 0;
  for (int i = 0; i < N; i++)
  {
    int x = X[i];
    int y = Y[i];

    if (i == N - 1 && x == 1)
    {
      set_of_one.insert(y);
      int toxic = *set_of_one.rbegin();
      if (toxic > 0)
      {
        res += toxic;
      }
    }
    else if (x == 0)
    {
      int non_toxic = y;
      int toxic = 0;

      if (set_of_one.size() >= 1)
      {
        toxic = *set_of_one.rbegin();
      }

      int point = toxic + non_toxic;
      if (point > 0)
      {
        res += point;
      }
      set_of_one.clear();
    }
    else if (x == 1)
    {
      set_of_one.insert(y);
    }
  }
  cout << res << endl;
}

// 高橋くんはレストランで、 N 品からなる奇妙なフルコースを楽しむことにしました。
// このコースのうち

// i 番目の料理は以下の通りです。

// - Xi =0 の場合、美味しさが Yi の 解毒剤入り の料理
// - Xi =1 の場合、美味しさが Yi の 毒入り の料理

// 高橋くんが料理を食べると、高橋くんの状態は以下のように変化します。

// - 最初、高橋くんはお腹を壊していない。
//   - 高橋くんが お腹を壊していない 時、
//       - 解毒剤入り の料理を食べても、高橋くんは お腹を壊していないまま である。
//       - 毒入り の料理を食べると、高橋くんは お腹を壊す 。
//   - 高橋くんが お腹を壊している 時、
//       - 解毒剤入り の料理を食べると、高橋くんは お腹を壊していない状態になる 。
//       - 毒入り の料理を食べると、高橋くんは 死ぬ 。

// コースは以下の流れで進行します。

// i=1,…,N についてこの順に、以下の処理を繰り返す。

//     まず、 i 番目の料理が高橋くんに提供される。

// 次に、 高橋くんはこの料理に対し「食べる」か「下げてもらう」かを選択する。

// 「食べる」を選択した場合、高橋くんは i 番目の料理を食べる。食べた料理に応じて高橋くんの状態も変化する。
// 「下げてもらう」を選択した場合、高橋くんはi 番目の料理を食べない。この料理を後で提供してもらったり何らかの手段で保存したりすることはできない。

// 最後に、 (状態が変化するなら変化後の時点で) 高橋くんが死んでいない場合、i != N なら次の料理に進む。
// i=N なら高橋くんは生きて退店する。

// 高橋くんはこのあと重要な仕事があるため、高橋くんは生きて退店しなければなりません。
// この条件の下で高橋くんが各料理に対し「食べる」「下げてもらう」を選択したとき、高橋くんが 食べた料理の美味しさの総和として考えられる最大値 ( 但し、何も食べなかった場合は 0 ) を出力してください。

// 制約
// - 入力は全て整数
// - 1≤N≤3×105
// - Xi​∈{0,1} (つまり、 Xi​ は 0,1 のどちらかである。)
// - −109≤Yi​≤109